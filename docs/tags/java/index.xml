<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Just4Fun</title>
    <link>blog/tags/java/</link>
    <description>Recent content in Java on Just4Fun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="blog/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>在Spring边缘试探</title>
      <link>blog/posts/try-spring/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      
      <guid>blog/posts/try-spring/</guid>
      <description>本文首发于简书，于2018年11月迁移至本博客
 虽说是Java web，但Spring已经成为了事实标准，Spring原理的深入学习，无论是在工作中，还是在面试中，都尤为重要。
Spring的两个核心概念是IOC（控制反转）和AOP（面向切面编程）。想了解Spring的工作原理，毫无疑问，首先要从这两个概念的Spring实现入手。但是Spring源码浩如烟海，里面掺杂了太多的实现细节，入门可谓极其困难。当我正苦于难以入门时，好友介绍了tiny-spring这个开源项目，这个项目用了不到千行的代码，就将Spring的IOC、AOP的核心流程实现完毕，真是居家旅行、吹逼面试之必备呀！
废话少说，我们开始吧！
目录结构 在github上clone下项目来之后，我们关注src文件夹，其余的是一些爱好者提的注释PR，恰巧被作者merge了，不必理会。目录结构是这样的：
 aop包，顾名思义，实现了Spring的AOP功能，可以通过bean的自动AOP切入，文件稍多，暂时先不展开。 bean.factory包，通过BeanFactory、AbstractBeanFactory、AutowireCapableBeanFactory三个类，实现了BeanFactory的核心功能，详情稍后讲解。 bean.io包定义了资源加载相关的抽象概念，这里的资源包括xml配置文件等。 bean.xml包中只包含一个类：XmlBeanDefinitionReader，主要负责在xml配置文件中读取bean定义。 bean包其他类，定义了BeanDefinition等核心概念，详情后讲。 context包定义了ApplicationContext的核心概念。 BeanReference指的是引用类型的Bean，而不是实体类。  IOC&amp;ndash;浮沙筑台之根基 IOC（控制翻转）是一种编程范式，可以在一定程度上解决复杂系统对象耦合度太高的问题，并不是Spring的专利。IOC最常见的方式是DI（依赖注入），可以通过一个容器，将Bean维护起来，方便在其他地方直接使用，而不是重新new。可以说，IOC是Spring最基本的概念，没有IOC就没有Spring。
为什么DI可以起到解耦的作用？
一个软件系统包含了大量的对象，每个对象之间都有依赖关系，在普通的软件编写过程中，对象的定义分布在各个文件之中，对象之间的依赖，只能通过类的构造器传参，方法传参的形式来完成。当工程变大之后，复杂的逻辑会让对象之间的依赖梳理变得异常困难。
在Spring IOC中，一般情况，我们可以在XML文件之中，统一的编写bean的定义，bean与bean之间的依赖关系，从而增加逻辑的清晰度。而且，bean的创建是由Spring来完成的，不需要编程人员关心，编程人员只需要将精力放到业务的逻辑上面，减轻了思维的负担。
在tiny-spring里面，整个beans和context包都是用来实现IOC的。
beans包实现的核心关注点是BeanFactory，BeanFactory也叫作Bean容器，顾名思义，是用来盛放、管理bean的。
context包实现的核心关注是ApplicationContext，ApplicationContext也是用来获取Bean的，但是它更高层，它的面向用户是Spring的使用者，而BeanFactory面向的用户更多是Spring开发者。BeanFactory定义了Bean初始化的流程，ApplicationContext定义了从XML读取，到Bean初始化，再到使用的过程。
Bean在哪定义？
刚才有说到，Spring通常通过xml文件，来统一的描述bean，bean与bean的依赖关系。所以说，bean的定义表述，发生在xml配置文件之中。这个XML文件就是我们需要读取的资源文件。
因此，首要任务就是研究与读取XML资源文件相关的类。
bean.io中存放的是读取资源文件的抽象概念。其中包含了三个类或者接口：
 Resource接口，这个接口只有一个方法，InputStream getInputStream() throws IOException;。实现这个接口的类就是一个抽象的资源，可以获取这个资源的输入流，从而获取其中的内容。 UrlResource类，这个类实现了Resource接口，通过构造器传入一个url地址，代表的是这个url所对应的文件。 ResourceLoader类，只有一个方法，public Resource getResource(String location)。输入url的文件地址（并不是真正的URL格式地址），来获取Resource。  通过分析上面三个类、接口，我们知道，这个包完成了一个任务：通过ResourceLoader这个类，获取某一个地址的Resource，从而获取这个文件的输入流。因为使用了Resource概念，可以使用网络文件或者本地文件。
Bean如何定义？
 BeanDefinition是Bean定义的核心概念，BeanDefinition包含了：bean的对象、bean的类类型、bean的名字，bean的所有属性。这个类对bean的基本信息做好一个包装。 BeanDefinitionReader接口，只有一个方法：void loadBeanDefinitions(String location) throws Exception;，实现这个接口的类，具有将某一个文件中的所有bean定义载入的功能。所以BeanDefinitionReader定义了，在哪载入bean定义，至于载入到哪里、如何载入，稍后看具体实现。 AbstractBeanDefinitionReader抽象类，上面刚说了实现了BeanDefinitionReader接口的类，具有将某一个文件中描述的bean定义载入的功能，AbstractBeanDefinitionReader就实现了这样一个抽象功能。它的作用就是定义，载入到哪和如何载入的问题。在这个类里面，有两个属性：Map&amp;lt;String,BeanDefinition&amp;gt; registry;和ResourceLoader resourceLoader;。registry是一个注册表，他保存的就是所有的Bean定义，Map结构，key是bean的名字，value就是BeanDefinition。resourceLoader描述了如何载入。 XmlBeanDefinitionReader这是beans.xml包里面的唯一一个方法，也是最重要的方法之一。它继承了AbstractBeanDefinitionReader，实现了所有方法，解决了bean定义中：在哪载入、如何载入、载入到哪的三个大问题。这个类面向用户的方法有两个，一个是loadBeanDefinitions，毫无疑问，这个是必须的。另一个是getRegistry用来获取bean注册表，得到所有bean的信息，registry是bean们在内存中实际的家。但是这个getRegistry方法并不是面向用户的，而是面向ApplicationContext的。 PropertyValue和PropertyValue代表一种抽象概念，在xml中，bean的属性包括属性名和属性对象，PropertyValue就是这么一个实体。 BeanReference代表的是Bean的属性不是真实对象，而是另一个bean的引用。  Bean的组装全过程?
上面两部分是铺垫，而BeanFactory才是重点对象。beans.factory包中有三个类用来定义BeanFactory相关的概念。
 BeanFactory接口，只有一个方法：Object getBean(String name) throws Exception;，实现这个接口的类，就具有了得到一个bean的能力。 AbstractBeanFactory类，较为复杂。详情后讲。 AutowireCapableBeanFactory继承了AbstractBeanFactory，实现了applyPropertyValues方法，通过反射，将bean的所有属性，通过set方法注入进去。  AbstractBeanFactory有三大属性：</description>
    </item>
    
  </channel>
</rss>